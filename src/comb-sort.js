/*
Сортировка расчёской — улучшение сортировки пузырьком. Её идея состоит в том, чтобы «устранить» элементы с 
небольшими значения в конце массива, которые замедляют работу алгоритма. Если при пузырьковой и шейкерной 
сортировках при переборе массива сравниваются соседние элементы, то при «расчёсывании» сначала берётся достаточно 
большое расстояние между сравниваемыми значениями, а потом оно сужается вплоть до минимального.

Первоначальный разрыв нужно выбирать не случайным образом, а с учётом специальной величины — фактора уменьшения, 
оптимальное значение которого равно 1,247. Сначала расстояние между элементами будет равняться размеру массива, 
поделённому на 1,247; на каждом последующем шаге расстояние будет снова делиться на фактор уменьшения — и так до 
окончания работы алгоритма.
*/

import { endLog, startLog } from "./utils"

export const combSort = (arr) => {
  startLog('Comb sort');

  let iterations = 0, comparisons = 0, writes = 0;

  //задаем фактор уменьшения
  const minFactor = 1.247;
  //задаем шаг с округлением (дробное число не даст обратиться по индексу)
  let step = Math.floor(arr.length / minFactor);

  //пока шаг не доберется до 0
  while(step > 0) {
    comparisons++;
    //идем по массиву с 0 до остаток шага
    for(let i = 0; i < arr.length - step; i++) {

      iterations++; comparisons++;
      //если больше
      if(arr[i] > arr[i + step]) {
        writes++;
        //меняем местами
        [arr[i], arr[i + step]] = [arr[i + step], arr[i]];
      }
    }
    //делим шаг на фактор
    step = Math.floor(step / minFactor);
  }
  
  endLog(iterations, comparisons, writes);
}